{"version":3,"sources":["assets/logo.svg","redux/reducers/infoReducer.ts","redux/store.ts","components/Select/index.tsx","redux/actions/infoActions.ts","api/settings.ts","api/index.ts","redux/thunks/infoThunks.ts","utils/getInfoType.ts","components/TopBar/index.tsx","components/InfoProvider/container/index.tsx","utils/createTables.tsx","hooks/useInfoItem.tsx","components/FilmItem/index.tsx","components/PeopleItem/index.tsx","components/PlanetsItem/index.tsx","components/StarshipItem/index.tsx","components/SpeciesItem/index.tsx","components/VehicleItem/index.tsx","components/Tabs/index.tsx","components/Table/index.tsx","App.tsx","index.tsx"],"names":["module","exports","_initialState","info","loading","_infoReducer","state","action","type","_rootReducer","combineReducers","infoReducer","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","reduxThunk","Option","Select","SelectCommon","options","defaultValue","onSelect","disabled","style","width","showSearch","placeholder","map","option","index","key","value","title","_axios","create","baseURL","swAPI","getInfo","a","axios","get","response","data","results","getInfoArray","infoUrls","Promise","all","url","then","search","query","getInfoAction","infoActions","setLoadingAction","dispath","_sortedInfo","sort","b","toLowerCase","name","getTypeByKey","Search","Input","searchInfoThunk","infoThunk","sortInfoThunk","sorts","TopBar","activeKey","dispatch","useDispatch","useSelector","useState","typingTimeout","setTypingTimeout","searchValue","setSearchValue","_handleSearch","align","span","onSearch","onChange","e","target","clearTimeout","setTimeout","offset","length","getInfoThunk","_connector","connect","infoType","render","useEffect","className","description","characterColumns","dataIndex","planetsColumns","starshipsColumns","speciesColumns","vehiclesColumns","filmsColumns","tablesStr","planets","characters","species","starships","vehicles","films","_tableStructure","push","columns","dataSource","_p","climate","diameter","_c","birth_year","gender","_sp","language","skin_colors","_st","model","starship_class","_v","manufacturer","_f","director","release_date","renderTables","marginTop","marginBottom","Table","useInfoItem","thumbRender","detailRender","header","setVisible","visible","actions","block","onClick","onCancel","footer","FilmItem","setCharacters","setSpecies","setStarships","setVehicles","setPlanet","res","producer","episode_id","opening_crawl","table","PeopleItem","setFilms","eye_color","hair_color","height","mass","undefined","PlanetsItem","terrain","gravity","StarshipItem","cargo_capacity","MGLT","cost_in_credits","hyperdrive_rating","max_atmosphering_speed","passengers","SpeciesItem","people","classification","designation","average_height","average_lifespan","created","eye_colors","hair_colors","VehicleItem","TabPane","Tabs","tabs","provider","_info","_Tabs","handleTabChange","defaultActiveKey","onTabClick","tab","_Table","Header","Layout","Footer","Content","App","activeTab","setActiveTab","href","src","logo","alt","padding","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.9715e59c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.455f51ee.svg\";","import {InfoActionsT} from '../thunks/infoThunks'\nimport {InfoT} from \"../../@types/response.types\";\n\ntype InitialStateT = {\n    info: InfoT\n    loading: boolean\n}\n\nconst _initialState: InitialStateT = {\n    info: [],\n    loading: false\n}\n\nconst _infoReducer = (state: InitialStateT = _initialState, action: InfoActionsT): InitialStateT => {\n    switch (action.type) {\n        case 'GET_INFO': return {\n            ...state,\n            info: action.info\n        }\n        case 'SET_LOADING': return {\n            ...state,\n            loading: action.loading\n        }\n        default: return state\n    }\n}\n\nexport default _infoReducer\n","import {createStore, combineReducers, applyMiddleware, compose} from 'redux'\nimport reduxThunk from 'redux-thunk'\n\nimport {infoReducer} from './reducers'\n\nconst _rootReducer = combineReducers({\n\n    info: infoReducer\n})\n\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport type GlobalStateT = ReturnType<typeof _rootReducer>\n\nexport const store = createStore(\n    _rootReducer,\n    composeEnhancers(\n        applyMiddleware(reduxThunk)\n    )\n)\n","import React from 'react'\nimport {Select} from \"antd\";\nimport {OptionT} from \"../../@types/select.types\";\nimport {LabeledValue} from \"antd/es/select\";\n\nconst {Option} = Select\n\ntype SelectT = {\n    options: OptionT[],\n    defaultValue?: string,\n    onSelect: (value: string | number | LabeledValue) => void\n    disabled: boolean\n}\n\n\nconst SelectCommon: React.FC<SelectT> = ({options, defaultValue, onSelect, disabled}) => {\n    return (\n        <Select\n            style={{width: '100%'}}\n            showSearch\n            placeholder={defaultValue}\n            onSelect={onSelect}\n            disabled={disabled}\n        >\n            {\n                options.map( (option, index) => <Option key={index} value={option.value}>{option.title}</Option> )\n            }\n        </Select>\n    )\n}\n\nexport default SelectCommon\n","import {InfoT} from \"../../@types/response.types\";\n\nconst GET_INFO = 'GET_INFO'\nconst SORT_INFO = 'SORT_INFO'\nconst SET_LOADING = 'SET_LOADING'\n\nconst _getInfoAction = (info: InfoT) => ({type: GET_INFO, info} as const)\nconst _sortArrayAction = () => ({type: SORT_INFO} as const)\nconst _setLoadingAction = (loading: boolean) => ({type: SET_LOADING, loading} as const)\n\nexport default {\n    getInfoAction: _getInfoAction,\n    sortArrayAction: _sortArrayAction,\n    setLoadingAction: _setLoadingAction\n}\n","import _axios from 'axios'\n\nexport default _axios.create({\n    baseURL: 'https://swapi.dev/api/'\n})\n","import axios from './settings'\n\nexport const swAPI = {\n    getInfo: async (type: string) => {\n        const response = await axios.get(type)\n        const {data} = response\n        return data.results\n    },\n    getInfoArray: async (infoUrls: Array<string>) => {\n        return await Promise.all( infoUrls.map( async (url: string) => await axios.get(url).then(response => response.data)) )\n    },\n    search: async (type: string, query: string) => {\n        const response = await axios.get(`${type}?search=${query}`)\n\n        const {data} = response\n        return data.results\n    }\n}\n","import {infoActions} from \"../actions\";\nimport {Dispatch} from \"redux\";\nimport {InferType} from \"../../@types/actions.types\";\nimport {swAPI} from \"../../api\";\nimport {InfoT} from \"../../@types/response.types\";\n\nexport type InfoTypeT = 'films' | 'people' | 'planets' | 'species' | 'starships' | 'vehicles'\n\nconst {\n    getInfoAction,\n    setLoadingAction\n} = infoActions\n\nexport type InfoActionsT = ReturnType<InferType<typeof infoActions>>\n\nconst _getInfoThunk = (type: InfoTypeT) => {\n    return async (dispath: Dispatch<InfoActionsT>) => {\n        dispath(setLoadingAction(true))\n        const info: InfoT = await swAPI.getInfo(type)\n        if(info) dispath(setLoadingAction(false))\n        dispath(getInfoAction(info))\n    }\n}\n\nconst _searchInfoThunk = (type: InfoTypeT, query: string) => {\n    return async (dispath: Dispatch<InfoActionsT>) => {\n        const info: InfoT = await swAPI.search(type, query)\n        dispath(getInfoAction(info))\n    }\n}\nconst _sortInfoThunk = (type: InfoTypeT) => {\n    return async (dispath: Dispatch<InfoActionsT>) => {\n        const info: any = await swAPI.getInfo(type)\n        let _sortedInfo: any\n        if(type === 'films') {\n            _sortedInfo = info.sort( (a:any, b:any) => {\n                if( a.title.toLowerCase() < b.title.toLowerCase()) return -1\n                else if( a.title.toLowerCase() > b.title.toLowerCase() ) return 1\n                return 0\n            } )\n        }else {\n            _sortedInfo = info.sort( (a:any, b:any) => {\n                if( a.name.toLowerCase() < b.name.toLowerCase()) return -1\n                else if( a.name.toLowerCase() > b.name.toLowerCase() ) return 1\n                return 0\n            } )\n        }\n        dispath(getInfoAction(_sortedInfo))\n    }\n}\n\nexport default {\n    getInfoThunk: _getInfoThunk,\n    searchInfoThunk: _searchInfoThunk,\n    sortInfoThunk: _sortInfoThunk\n}\n","export const getTypeByKey = (key: string) => {\n    switch (key) {\n        case '0': return 'films'\n        case '1': return 'people'\n        case '2': return 'planets'\n        case '3': return 'starships'\n        case '4': return 'species'\n        case '5': return 'vehicles'\n        default: return 'films'\n    }\n}\n","import React, {useState} from \"react\";\nimport {Col, Input, Row} from \"antd\";\n\nimport {Select} from '../index';\n\nimport {OptionT} from \"../../@types/select.types\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {infoThunk} from \"../../redux/thunks\";\nimport {getTypeByKey} from \"../../utils/getInfoType\";\nimport {GlobalStateT} from \"../../redux/store\";\n\nconst {Search} = Input\nconst {searchInfoThunk, sortInfoThunk} = infoThunk\n\ntype TopBarPropsT = {\n    activeKey: string\n}\n\nconst sorts: OptionT[] = [\n    {value: 'by_name', title: 'По названию'},\n]\n\nconst TopBar: React.FC<TopBarPropsT> = ({activeKey}) => {\n\n    const dispatch = useDispatch()\n    const info = useSelector(({info}: GlobalStateT) => info.info)\n\n    const [typingTimeout, setTypingTimeout] = useState<any>()\n    const [searchValue, setSearchValue] = useState('')\n\n    const _handleOptionSelected = () => {\n        dispatch(sortInfoThunk(getTypeByKey(activeKey)))\n    }\n\n    const _handleSearch = (value: string) => dispatch(searchInfoThunk(getTypeByKey(activeKey), value))\n\n    const _handleInputChange = ( e: React.ChangeEvent<HTMLInputElement>) => {\n        const value = e.target.value\n\n        if(typingTimeout) clearTimeout(typingTimeout)\n\n        setSearchValue(value)\n        setTypingTimeout(setTimeout( () => {\n            _handleSearch(value)\n        }, 200))\n    }\n\n    return (\n        <Row align='middle'>\n            <Col span={10}>\n                <Search\n                    placeholder=\"Начните вводить название фильма...\"\n                    onSearch={value => _handleSearch(value)}\n                    onChange={_handleInputChange}\n                    value={searchValue}\n\n                />\n            </Col>\n            <Col span={4} offset={2}>\n                <Select disabled={!info.length} options={sorts} defaultValue={sorts[0].title} onSelect={_handleOptionSelected}/>\n            </Col>\n        </Row>\n    )\n}\n\nexport default TopBar\n","import React, {useEffect} from \"react\";\nimport {connect, ConnectedProps} from 'react-redux'\nimport {infoThunk} from \"../../../redux/thunks\";\nimport {GlobalStateT} from \"../../../redux/store\";\n\nimport {Empty, Spin} from 'antd';\n\nimport {InfoTypeT} from \"../../../redux/thunks/infoThunks\";\nimport {RenderComponent} from \"../../Tabs\";\n\nimport './styles.css'\n\nconst {getInfoThunk} = infoThunk\n\ntype _FCProps = ConnectedProps<typeof _connector> & InfoOwnPropsT\n\ntype InfoOwnPropsT = {\n    infoType: InfoTypeT,\n    render: RenderComponent,\n    loading: boolean\n}\n\nconst _mapStateToProps = ({info}: GlobalStateT) => ({\n    info: info.info,\n    loading: info.loading\n})\n\nconst _InfoProvider: React.FC<InfoOwnPropsT & _FCProps> = (\n    {\n        info,\n        getInfoThunk,\n        infoType,\n        render,\n        loading\n    }) => {\n\n    useEffect(() => {\n        getInfoThunk(infoType)\n    }, [])\n\n    return (\n        (!loading)\n            ?\n                (info && info.length)\n                    ? <div className='films-container'>\n                        {render(info)}\n                    </div>\n                    : <Empty description='Поиск не дал результатов'/>\n            : <Spin/>\n\n    )\n}\n\nconst _connector = connect(_mapStateToProps, {getInfoThunk})\n\nexport default _connector(_InfoProvider)\n\n","import {Column} from \"../components/Table\";\nimport {Film, People, Planet, Species, Starships, Vehicles} from \"../@types/response.types\";\nimport {Table} from \"../components\";\nimport React from \"react\";\n\nconst characterColumns: Column[] = [\n    {title: 'Имя', dataIndex: 'name', key: 'name'},\n    {title: 'Год рождения', dataIndex: 'birth_year', key: 'birth_year'},\n    {title: 'Пол', dataIndex: 'gender', key: 'gender'},\n]\nconst planetsColumns: Column[] = [\n    {title: 'Имя', dataIndex: 'name', key: 'name'},\n    {title: 'Климат', dataIndex: 'climate', key: 'climate'},\n    {title: 'Диаметр', dataIndex: 'diameter', key: 'diameter'},\n]\nconst starshipsColumns: Column[] = [\n    {title: 'Имя', dataIndex: 'name', key: 'name'},\n    {title: 'Модель', dataIndex: 'model', key: 'model'},\n    {title: 'Класс', dataIndex: 'starship_class', key: 'starship_class'},\n]\nconst speciesColumns: Column[] = [\n    {title: 'Имя', dataIndex: 'name', key: 'name'},\n    {title: 'Язык', dataIndex: 'language', key: 'language'},\n    {title: 'Цвет кожи', dataIndex: 'skin_colors', key: 'skin_colors'},\n]\nconst vehiclesColumns: Column[] = [\n    {title: 'Имя', dataIndex: 'name', key: 'name'},\n    {title: 'Модель', dataIndex: 'model', key: 'model'},\n    {title: 'Производитель', dataIndex: 'manufacturer', key: 'manufacturer'},\n]\nconst filmsColumns: Column[] = [\n    {title: 'Название', dataIndex: 'title', key: 'title'},\n    {title: 'Режисер', dataIndex: 'director', key: 'director'},\n    {title: 'Дата выхода', dataIndex: 'release_date', key: 'release_date'},\n]\n\ntype _TablesT = {\n    title: string,\n    columns: Column[],\n    dataSource: any\n}\n\nexport const tablesStr = (\n    planets?: Planet[],\n    characters?: People[],\n    species?: Species[],\n    starships?: Starships[],\n    vehicles?: Vehicles[],\n    films?: Film[]\n): _TablesT[] => {\n\n    let _tableStructure: _TablesT[] = []\n\n    if(planets) {\n        _tableStructure.push({\n            title: 'Планета',\n            columns: planetsColumns,\n            dataSource: planets.map( (_p, index) => ({key: index, name: _p.name, climate: _p.climate, diameter: _p.diameter}))\n        })\n    }\n    if(characters){\n        _tableStructure.push({\n            title: 'Персонажи',\n            columns: characterColumns,\n            dataSource: characters.map( (_c, index) => ({key: index, name: _c.name, birth_year: _c.birth_year, gender: _c.gender}))\n        })\n    }\n    if(species){\n        _tableStructure.push({\n            title: 'Виды персонажей',\n            columns: speciesColumns,\n            dataSource: species.map( (_sp, index) => ({key: index, name: _sp.name, language: _sp.language, skin_colors: _sp.skin_colors}))\n        })\n    }\n    if(starships){\n        _tableStructure.push({\n            title: 'Корабли',\n            columns: starshipsColumns,\n            dataSource: starships.map( (_st, index) => ({key: index, name: _st.name, model: _st.model, starship_class: _st.starship_class}))\n        })\n    }\n    if(vehicles){\n        _tableStructure.push({\n            title: 'Транспортные средства',\n            columns: vehiclesColumns,\n            dataSource: vehicles.map( (_v, index) => ({key: index, name: _v.name, model: _v.model, manufacturer: _v.manufacturer}))\n        })\n    }\n    if(films){\n        _tableStructure.push({\n            title: 'Фильмы',\n            columns: filmsColumns,\n            dataSource: films.map( (_f, index) => ({key: index, title: _f.title, director: _f.director, release_date: _f.release_date}))\n        })\n    }\n\n    return _tableStructure\n}\n\nexport const renderTables = ({title, columns, dataSource}: _TablesT) => {\n    return (\n        <div key={title} style={{marginTop: '24px'}}>\n            <h2 style={{marginBottom: '10px'}}>{title}</h2>\n            <Table\n                columns={columns}\n                dataSource={dataSource}\n            />\n        </div>\n    )\n}\n","import React from \"react\";\nimport {Button, Card, Col, Modal} from \"antd\";\n\ntype UseInfoItemPropsT = {\n    thumbRender: () => React.ReactNode,\n    detailRender: () => React.ReactNode,\n    header: string | React.ReactNode,\n    visible: boolean,\n    setVisible: (visible: boolean) => any\n}\n\nexport const useInfoItem = ({thumbRender, detailRender, header, setVisible, visible}: UseInfoItemPropsT) => {\n\n    return (\n        <>\n            <Col span={5} className='film-item'>\n                <Card\n                    className='film-card'\n                    title={<strong>{header}</strong>}\n                    actions={[<Button block type=\"link\" onClick={() => setVisible(true)}>Детальнее</Button>]}\n                >\n                    {\n                        thumbRender()\n                    }\n                </Card>\n            </Col>\n\n            {\n                visible && <Modal\n                    width='90%'\n                    title={header}\n                    visible={visible}\n                    onCancel={ () => setVisible(false)}\n                    footer={null}\n                >\n                    {detailRender()}\n                </Modal>\n            }\n        </>\n    )\n}\n","import React, {useEffect, useState} from \"react\";\n\nimport {Film, People, Planet, Species, Starships, Vehicles} from \"../../@types/response.types\";\n\nimport './styles.css'\nimport {swAPI} from \"../../api\";\nimport {renderTables, tablesStr} from \"../../utils/createTables\";\nimport {useInfoItem} from \"../../hooks/useInfoItem\";\n\ntype _FilmItemPropsT = {\n    info: Film\n}\n\nconst FilmItem: React.FC<_FilmItemPropsT> = ({info}) => {\n    const [visible, setVisible] = useState<boolean>(false)\n\n    const [characters, setCharacters] = useState<People[]>([])\n    const [species, setSpecies] = useState<Species[]>([])\n    const [starships, setStarships] = useState<Starships[]>([])\n    const [vehicles, setVehicles] = useState<Vehicles[]>([])\n    const [planets, setPlanet] = useState<Planet[]>([])\n\n    useEffect(() => {\n        const res = async () => {\n            setCharacters(await swAPI.getInfoArray(info.characters))\n            setSpecies(await swAPI.getInfoArray(info.species))\n            setStarships(await swAPI.getInfoArray(info.starships))\n            setVehicles(await swAPI.getInfoArray(info.vehicles))\n            setPlanet(await swAPI.getInfoArray(info.planets))\n        }\n        if (visible) res()\n    }, [visible])\n\n    const _thumbRender = () => {\n        return (\n            <>\n                <p><strong>Режисер: </strong> {info.director}</p>\n                <p><strong>Продюсер: </strong> {info.producer}</p>\n                <p><strong>Дата выхода: </strong> {info.release_date}</p>\n            </>\n        )\n    }\n\n    const _detailRender = () => {\n        return (\n            <div>\n                <p><strong>Режисер: </strong> {info.director}</p>\n                <p><strong>Продюсер: </strong> {info.producer}</p>\n                <p><strong>Дата выхода: </strong> {info.release_date}</p>\n                <p><strong>Номер эпизода: </strong> {info.episode_id}</p>\n                <p><strong>Начальный текст: </strong> {info.opening_crawl}</p>\n                {\n                    tablesStr(planets, characters, species, starships, vehicles).map(table => renderTables(table))\n                }\n            </div>\n        )\n    }\n\n    return useInfoItem(\n        {\n            thumbRender: _thumbRender,\n            detailRender: _detailRender,\n            visible,\n            setVisible,\n            header: info.title\n        }\n    )\n}\n\nexport default FilmItem\n","import React, {useEffect, useState} from \"react\";\n\nimport {Film, People, Species, Starships, Vehicles} from \"../../@types/response.types\";\n\nimport './styles.css'\nimport {swAPI} from \"../../api\";\nimport {renderTables, tablesStr} from \"../../utils/createTables\";\nimport {useInfoItem} from \"../../hooks/useInfoItem\";\n\ntype _PeopleItemPropsT = {\n    info: People\n}\n\nconst PeopleItem: React.FC<_PeopleItemPropsT> = ({info}) => {\n    const [visible, setVisible] = useState<boolean>(false)\n    const [species, setSpecies] = useState<Species[]>([])\n    const [starships, setStarships] = useState<Starships[]>([])\n    const [vehicles, setVehicles] = useState<Vehicles[]>([])\n    const [films, setFilms] = useState<Film[]>([])\n\n    useEffect(() => {\n        const res = async () => {\n            if(info) {\n                setSpecies(await swAPI.getInfoArray(info.species))\n                setStarships(await swAPI.getInfoArray(info.starships))\n                setVehicles(await swAPI.getInfoArray(info.vehicles))\n                setFilms(await swAPI.getInfoArray(info.films))\n            }\n        }\n        if(visible) res()\n    }, [visible])\n\n    const _thumbRender = () => {\n        return (\n            <>\n                <p><strong>Пол: </strong> {info.gender}</p>\n                <p><strong>Цвет глаз: </strong> {info.eye_color}</p>\n                <p><strong>Цвет волос: </strong> {info.hair_color}</p>\n                <p><strong>Рост: </strong> {info.height}</p>\n                <p><strong>Вес: </strong> {info.mass}</p>\n            </>\n        )\n    }\n\n    const _detailRender = () => {\n        return (\n            <div>\n                <p><strong>Пол: </strong> {info.gender}</p>\n                <p><strong>Цвет глаз: </strong> {info.eye_color}</p>\n                <p><strong>Цвет волос: </strong> {info.hair_color}</p>\n                <p><strong>Рост: </strong> {info.height}</p>\n                <p><strong>Вес: </strong> {info.mass}</p>\n                {\n                    tablesStr(undefined, undefined, species, starships, vehicles, films).map((table) => renderTables(table))\n                }\n            </div>\n        )\n    }\n\n    return useInfoItem(\n        {\n            thumbRender: _thumbRender,\n            detailRender: _detailRender,\n            visible,\n            setVisible,\n            header: info.name\n        }\n    )\n\n}\n\nexport default PeopleItem\n","import React, {useEffect, useState} from \"react\";\n\nimport {Film, Planet} from \"../../@types/response.types\";\n\nimport './styles.css'\nimport {swAPI} from \"../../api\";\nimport {renderTables, tablesStr} from \"../../utils/createTables\";\nimport {useInfoItem} from \"../../hooks/useInfoItem\";\n\ntype _PlanetsItemPropsT = {\n    info: Planet\n}\n\nconst PlanetsItem: React.FC<_PlanetsItemPropsT> = ({info}) => {\n\n    const [visible, setVisible] = useState<boolean>(false)\n    const [films, setFilms] = useState<Film[]>([])\n\n    useEffect(() => {\n        const res = async () => {\n            if (info) {\n                setFilms(await swAPI.getInfoArray(info.films))\n            }\n        }\n        if (visible) res()\n    }, [visible])\n\n    const _thumbRender = () => {\n        return (\n            <>\n                <p><strong>Климат: </strong> {info.climate}</p>\n                <p><strong>Диаматр: </strong> {info.diameter}</p>\n                <p><strong>Местность: </strong> {info.terrain}</p>\n                <p><strong>Гравитация: </strong> {info.gravity}</p>\n            </>\n        )\n    }\n\n    const _detailRender = () => {\n        return (\n            <div>\n                <p><strong>Климат: </strong> {info.climate}</p>\n                <p><strong>Диаматр: </strong> {info.diameter}</p>\n                <p><strong>Местность: </strong> {info.terrain}</p>\n                <p><strong>Гравитация: </strong> {info.gravity}</p>\n                {\n                    tablesStr(undefined, undefined, undefined, undefined, undefined, films).map((table) => renderTables(table))\n                }\n            </div>\n        )\n    }\n\n    return useInfoItem(\n        {\n            thumbRender: _thumbRender,\n            detailRender: _detailRender,\n            visible,\n            setVisible,\n            header: info.name\n        }\n    )\n}\n\nexport default PlanetsItem\n","import React, {useEffect, useState} from \"react\";\n\nimport {Film, Starships} from \"../../@types/response.types\";\n\nimport './styles.css'\nimport {swAPI} from \"../../api\";\nimport {renderTables, tablesStr} from \"../../utils/createTables\";\nimport {useInfoItem} from \"../../hooks/useInfoItem\";\n\ntype _StarshipItemPropsT = {\n    info: Starships\n}\n\nconst StarshipItem: React.FC<_StarshipItemPropsT> = ({info}) => {\n\n    const [visible, setVisible] = useState<boolean>(false)\n    const [films, setFilms] = useState<Film[]>([])\n\n    useEffect(() => {\n        const res = async () => {\n            if (info) {\n                setFilms(await swAPI.getInfoArray(info.films))\n            }\n        }\n        if (visible) res()\n    }, [visible])\n\n    const _thumbRender = () => {\n        return (\n            <>\n                <p><strong>Модель: </strong> {info.model}</p>\n                <p><strong>Производитель: </strong> {info.manufacturer}</p>\n                <p><strong>Класс: </strong> {info.starship_class}</p>\n                <p><strong>Грузоподъемность: </strong> {info.cargo_capacity}</p>\n            </>\n        )\n    }\n\n    const _detailRender = () => {\n        return (\n            <div>\n                <p><strong>Модель: </strong> {info.model}</p>\n                <p><strong>Производитель: </strong> {info.manufacturer}</p>\n                <p><strong>Класс: </strong> {info.starship_class}</p>\n                <p><strong>Грузоподъемность: </strong> {info.cargo_capacity}</p>\n                <p><strong>MGLT: </strong> {info.MGLT}</p>\n                <p><strong>Стоимость в кредитах: </strong> {info.cost_in_credits}</p>\n                <p><strong>Рейтинг гипердвигателя: </strong> {info.hyperdrive_rating}</p>\n                <p><strong>Длина: </strong> {info.length}</p>\n                <p><strong>Максимальная скорость: </strong> {info.max_atmosphering_speed}</p>\n                <p><strong>Пассажиры: </strong> {info.passengers}</p>\n                {\n                    tablesStr(undefined, undefined, undefined, undefined, undefined, films).map((table) => renderTables(table))\n                }\n            </div>\n        )\n    }\n\n    return useInfoItem(\n        {\n            thumbRender: _thumbRender,\n            detailRender: _detailRender,\n            visible,\n            setVisible,\n            header: info.name\n        }\n    )\n\n}\n\nexport default StarshipItem\n","import React, {useEffect, useState} from \"react\";\n\nimport {Film, People, Species} from \"../../@types/response.types\";\n\nimport './styles.css'\nimport {swAPI} from \"../../api\";\nimport {renderTables, tablesStr} from \"../../utils/createTables\";\nimport {useInfoItem} from \"../../hooks/useInfoItem\";\n\ntype _SpeciesItemPropsT = {\n    info: Species\n}\n\nconst SpeciesItem: React.FC<_SpeciesItemPropsT> = ({info}) => {\n\n    const [visible, setVisible] = useState<boolean>(false)\n    const [films, setFilms] = useState<Film[]>([])\n    const [characters, setCharacters] = useState<People[]>([])\n\n    useEffect(() => {\n        const res = async () => {\n            if (info) {\n                setFilms(await swAPI.getInfoArray(info.films))\n                setCharacters(await swAPI.getInfoArray(info.people))\n\n            }\n        }\n        if (visible) res()\n    }, [visible])\n\n    const _thumbRender = () => {\n        return (\n            <>\n                <p><strong>Классификация: </strong> {info.classification}</p>\n                <p><strong>Обозначение: </strong> {info.designation}</p>\n                <p><strong>Язык: </strong> {info.language}</p>\n                <p><strong>Цвет кожи: </strong> {info.skin_colors}</p>\n            </>\n        )\n    }\n\n    const _detailRender = () => {\n        return (\n            <div>\n                <p><strong>Классификация: </strong> {info.classification}</p>\n                <p><strong>Обозначение: </strong> {info.designation}</p>\n                <p><strong>Язык: </strong> {info.language}</p>\n                <p><strong>Цвет кожи: </strong> {info.skin_colors}</p>\n                <p><strong>Средний рост: </strong> {info.average_height}</p>\n                <p><strong>Средная продолжительность жизни: </strong> {info.average_lifespan}</p>\n                <p><strong>Дата создания: </strong> {info.created}</p>\n                <p><strong>Цвета глаз: </strong> {info.eye_colors}</p>\n                <p><strong>Цвета волос: </strong> {info.hair_colors}</p>\n                {\n                    tablesStr(undefined, characters, undefined, undefined, undefined, films).map((table) => renderTables(table))\n                }\n            </div>\n        )\n    }\n\n    return useInfoItem(\n        {\n            thumbRender: _thumbRender,\n            detailRender: _detailRender,\n            visible,\n            setVisible,\n            header: info.name\n        }\n    )\n\n\n}\n\nexport default SpeciesItem\n","import React, {useEffect, useState} from \"react\";\n\nimport {Film, Vehicles} from \"../../@types/response.types\";\n\nimport './styles.css'\nimport {renderTables, tablesStr} from \"../../utils/createTables\";\nimport {swAPI} from \"../../api\";\nimport {useInfoItem} from \"../../hooks/useInfoItem\";\n\ntype _VehicleItemPropsT = {\n    info: Vehicles\n}\n\nconst VehicleItem: React.FC<_VehicleItemPropsT> = ({info}) => {\n\n    const [visible, setVisible] = useState<boolean>(false)\n    const [films, setFilms] = useState<Film[]>([])\n\n    useEffect(() => {\n        const res = async () => {\n            if (info) {\n                setFilms(await swAPI.getInfoArray(info.films))\n            }\n        }\n        if (visible) res()\n    }, [visible])\n\n\n    const _thumbRender = () => {\n        return (\n            <>\n                <p><strong>Модель: </strong> {info.model}</p>\n                <p><strong>Производитель: </strong> {info.manufacturer}</p>\n                <p><strong>Грузоподъемность: </strong> {info.cargo_capacity}</p>\n            </>\n        )\n    }\n\n    const _detailRender = () => {\n        return (\n            <div>\n                <p><strong>Модель: </strong> {info.model}</p>\n                <p><strong>Производитель: </strong> {info.manufacturer}</p>\n                <p><strong>Грузоподъемность: </strong> {info.cargo_capacity}</p>\n                <p><strong>Стоимость в кредитах: </strong> {info.cost_in_credits}</p>\n                <p><strong>Длина: </strong> {info.length}</p>\n                <p><strong>Максимальная скорость: </strong> {info.max_atmosphering_speed}</p>\n                <p><strong>Пассажиры: </strong> {info.passengers}</p>\n                {\n                    tablesStr(undefined, undefined, undefined, undefined, undefined, films).map((table) => renderTables(table))\n                }\n            </div>\n        )\n    }\n\n    return useInfoItem(\n        {\n            thumbRender: _thumbRender,\n            detailRender: _detailRender,\n            visible,\n            setVisible,\n            header: info.name\n        }\n    )\n\n}\n\nexport default VehicleItem\n","import React from \"react\";\nimport {useDispatch} from \"react-redux\";\n\nimport {Tabs} from 'antd';\nimport {\n    FilmItem,\n    InfoProvider,\n    PeopleItem,\n    PlanetsItem,\n    SpeciesItem, StarshipItem,\n    VehicleItem,\n\n} from \"../index\";\nimport {InfoTypeT} from \"../../redux/thunks/infoThunks\";\nimport {Film, People, Planet, Species, Starships, Vehicles} from \"../../@types/response.types\";\nimport {infoThunk} from \"../../redux/thunks\";\nimport {getTypeByKey} from \"../../utils/getInfoType\";\n\nconst {TabPane} = Tabs;\n\nconst {getInfoThunk} = infoThunk\n\ntype TabsPropsT = {\n    handleTabChange: (tab: string) => any\n}\n\nexport type RenderComponent = (info: any) => React.ReactNode\n\ntype TabT = {\n    type: InfoTypeT,\n    title: string,\n    provider: React.ReactNode,\n}\n\n\nconst tabs: TabT[] = [\n    {\n        type: 'films',\n        title: 'Фильмы',\n        provider: <InfoProvider\n            render={(info: Film[]) => (info.map((_info, index: number) => <FilmItem key={index} info={_info}/>))}\n            infoType='films'\n        />\n    },\n    {\n        type: 'people',\n        title: 'Персонажи',\n        provider: <InfoProvider\n            render={(info: People[]) => info.map((_info, index: number) => <PeopleItem key={index} info={_info}/>)}\n            infoType='people'\n        />\n    },\n    {\n        type: 'planets',\n        title: 'Планеты',\n        provider: <InfoProvider\n            render={(info: Planet[]) => info.map((_info, index: number) => <PlanetsItem key={index} info={_info}/>)}\n            infoType='planets'\n        />\n    },\n    {\n        type: 'starships',\n        title: 'Корабли',\n        provider: <InfoProvider\n            render={(info: Starships[]) => info.map((_info, index: number) => <StarshipItem key={index} info={_info}/>)}\n            infoType='starships'\n        />\n    },\n    {\n        type: 'species',\n        title: 'Виды персонажей',\n        provider: <InfoProvider\n            render={(info: Species[]) => info.map((_info, index: number) => <SpeciesItem key={index} info={_info}/>)}\n            infoType='species'\n        />\n    },\n    {\n        type: 'vehicles',\n        title: 'Транспортные средства',\n        provider: <InfoProvider\n            render={(info: Vehicles[]) => info.map((_info, index: number) => <VehicleItem key={index} info={_info}/>)}\n            infoType='vehicles'\n        />\n    },\n]\n\nconst _Tabs: React.FC<TabsPropsT> = ({handleTabChange}) => {\n\n    const dispatch = useDispatch()\n\n    return (\n        <Tabs\n            onChange={(key) => handleTabChange(key)}\n            defaultActiveKey=\"0\"\n            style={{marginTop: '24px'}}\n            onTabClick={(key) => {\n                dispatch(getInfoThunk(getTypeByKey(key)))\n            }}\n        >\n            {\n                tabs.map((tab, index) => (\n                    <TabPane tab={tab.title} key={index}>\n                        {tab.provider}\n                    </TabPane>\n                ))\n            }\n\n        </Tabs>\n    )\n}\n\nexport default _Tabs\n","import React from \"react\";\nimport {Table} from \"antd\";\n\nexport type Column = {\n    title: string,\n    dataIndex: string,\n    key: string,\n}\n\ntype TablesPropsT = {\n    columns: Column[],\n    dataSource: Array<any>\n}\n\nconst _Table: React.FC<TablesPropsT> = ({columns, dataSource}) => {\n\n\n    return <Table loading={!!!dataSource.length} columns={columns} dataSource={dataSource} />\n}\n\nexport default _Table\n","import React, {useState} from 'react';\n\nimport {Layout} from 'antd';\nimport {Tabs, TopBar} from './components'\n\nimport './App.css';\n\nimport logo from './assets/logo.svg'\n\nconst {Header, Footer, Content} = Layout;\n\nfunction App() {\n\n    const [activeTab, setActiveTab] = useState<string>('0')\n\n    const handleTabChange = (tab:string) => setActiveTab(tab)\n\n    return (\n        <Layout>\n            <Header>\n                <a href=\"/\"><img src={logo} alt=\"DB2 Limited\"/></a>\n            </Header>\n            <Content style={{padding: '20px 50px'}}>\n                <TopBar activeKey={activeTab}/>\n                <Tabs handleTabChange={handleTabChange}/>\n            </Content>\n            <Footer>Powered by kapishdima@gmail.com</Footer>\n        </Layout>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport {store} from './redux/store'\n\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}